\input texinfo  @c -*- mode:texinfo coding:utf-8 -*-
@comment %**start of header
@c EN
@setfilename gauche-libev-refe.info
@settitle Gauche-libev : libev wrapper for Gauche
@dircategory The Algorithmic Language Scheme
@direntry
* Gauche-libev Reference: (gauche-libev-refe.info).	Gauche libev wrapper
@end direntry
@c JP
@setfilename gauche-libev-refj.info
@settitle Gauche-libev : libev wrapper for Gauche
@dircategory The Algorithmic Language Scheme
@direntry
* Gauche-libev Reference (ja): (gauche-libev-refj.info).	Gauche libev wrapper
@end direntry
@c COMMON
@comment %**end of header

@c module and class index
@defcodeindex md
@defcodeindex cl

@iftex
@finalout
@parskip 4pt plus 1pt
@end iftex

@titlepage
@c EN
@title Gauche-libev : libev wrapper for Gauche
@c JP
@title Gauche-libev : libev wrapper for Gauche
@c COMMON
@subtitle version @VERSION@
@author Shiro Kawai (shiro@@acm.org)

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2015 Shiro Kawai (shiro@@acm.org)

@end titlepage

@node Top, Introduction, (dir), (dir)

@ifnottex
This is a reference manual of Gauche-libev, a libev wrapper for the
Gauche Scheme implementation.
This manual is for version @VERSION@.
@end ifnottex

@c ======================================================================
@menu
* Introduction::                
* Installation::                
* libev API::                  
* Indices::                     
@end menu

@node Introduction
@chapter Introduction
@c NODE はじめに

Gauche-libev is an extension module of Gauche Scheme implementation.
It provides Gauche module @code{control.libev}.

@c ======================================================================
@node Installation
@chapter Installation

Installing Gauche-libev is usually straightforward on Unix variants.

You have to have the following programs installed on your machine.
@itemize @bullet
@item
Gauche 0.9.5 or later.
@item
libev 4.0 or later.
@end itemize

The standard way to compile and install Gauche-libev is as follows:
@example
% gzcat Gauche-libev-@VERSION@.tgz | tar xf -
% cd Gauche-libev-@VERSION@
% ./configure
% make
% make check
% make install
@end example

Or you can use @file{gauche-package} command:
@example
% gauche-package install -C=<configure-option> Gauche-libev-@VERSION@.tgz
@end example


The configure script figures out the location Gauche is installed,
and install Gauche-libev in the same place.

There are various examples under @file{examples/} directory.
If you want to run the examples before installing Gauche-libev,
you have to tell the location of the library to @code{gosh}
command, e.g. @code{gosh -I../src -I../lib httpd.gosh}.

@table @file
@item httpd.gosh
A sample HTTP 1.1 server.
@end table

@c ======================================================================
@node libev API
@chapter libev API

In this chapter we list libev procedures accessible through
Gauche-libev, with brief descriptions to help programmers
remind what the functions are.

@menu
* Overview::
* libev data types::               
* libev feature checking::         
* Event loops::
* Watchers::
@end menu

@c ----------------------------------------------------------------------
@node Overview
@section Overview
@deftp {Module} control.libev
@mdindex control.libev
The module. It is placed under @code{control} mimicking what Gauche-libuv does.
@end deftp

@c ----------------------------------------------------------------------
@defvr {Constant} EV_READ
@defvrx {Constant} EV_WRITE
@defvrx {Constant} EVRUN_NOWAIT
@defvrx {Constant} EVRUN_ONCE
@defvrx {Constant} EVFLAG_AUTO
@defvrx {Constant} EVFLAG_NOENV
@defvrx {Constant} EVFLAG_FORKCHECK
@defvrx {Constant} EVFLAG_NOINOTIFY
@defvrx {Constant} EVFLAG_SIGNALFD
@defvrx {Constant} EVFLAG_NOSIGMASK
@defvrx {Constant} EVBACKEND_SELECT
@defvrx {Constant} EVBACKEND_POLL
@defvrx {Constant} EVBACKEND_EPOLL
@defvrx {Constant} EVBACKEND_KQUEUE
@defvrx {Constant} EVBACKEND_DEVPOLL
@defvrx {Constant} EVBACKEND_PORT
@defvrx {Constant} EVBACKEND_ALL
@defvrx {Constant} EVBACKEND_MASK
Integer constants exposed by libev. Gauche-libev makes no attempt at making constants/flag handling ``nicer.'' Use good old @code{logior}.
@end defvr

@c ----------------------------------------------------------------------
@node libev data types
@section libev data types

The only noteworthy type alias libev has is @code{ev_tstamp}, values of which type are obviously mapped to Scheme real numbers.

Watcher structs are mapped to Scheme classes following a straight-forward naming convention: @code{struct ev_TYPE} becomes @code{<ev-TYPE>}.
All watcher classes inherit @code{@ref{<ev-watcher>}}, mirroring the fact that every @code{struct ev_TYPE} can be seen as a @code{struct ev_watcher}.

@c ----------------------------------------------------------------------
@node libev feature checking
@section libev feature checking

Currently Gauche-libev requires libev compiled with multiple event loop support.
Some kind of feature checking will be necessary if we add support for libev without multiple event loop support.

@c ----------------------------------------------------------------------
@node Event loops
@section Event loops

@anchor{<ev-loop>}
@deftp {Class} <ev-loop>
@clindex ev-loop
Wraps @code{struct ev_loop}.
@end deftp

@defun ev-default-loop :optional flags
Wraps @code{ev_default_loop}. Keep in mind that the default loop can be initialized only once.
@code{ev-default-loop} takes advantage of this fact and caches an instance of @code{<ev-loop>} it makes when it is first called.
For subsequent calls, @code{ev-default-loop} returns the cached instance without invoking @code{ev_default_loop}.
@var{flags} can be @code{0} (default) or a @code{logior} of one or more constants shown below:

@table @code
@item EVFLAG_AUTO
@item EVFLAG_NOENV
@item EVFLAG_FORKCHECK
@item EVFLAG_NOINOTIFY
@item EVFLAG_SIGNALFD
@item EVFLAG_NOSIGMASK
@item EVBACKEND_SELECT
@item EVBACKEND_POLL
@item EVBACKEND_EPOLL
@item EVBACKEND_KQUEUE
@item EVBACKEND_DEVPOLL
@item EVBACKEND_PORT
@item EVBACKEND_ALL
@item EVBACKEND_MASK
@end table
@end defun

@anchor{ev-run}
@defun ev-run :optional loop flags
Wraps @code{ev_run}, which starts handling events in a way specified by @var{loop}.
@code{ev_run} recognizes @code{EVRUN_NOWAIT} and @code{EVRUN_ONCE} as @var{flags} values.
If you omit @var{loop}, @code{(ev-thread-local-loop)} is used.
The default value of @var{flags} is 0.
It is permitted to omit @var{loop} and supply @var{flags}.
Returns @code{#<undef>}.
@end defun

@c ----------------------------------------------------------------------
@node Watchers
@section Watchers

@anchor{<ev-watcher>}
@deftp {Class} <ev-watcher>
@clindex ev-watcher
Wraps @code{struct ev_watcher *}. All other watcher classes, e.g. @code{<ev-io>}, inherit from this class.

@defivar <ev-watcher> loop
An @code{@ref{<ev-loop>}} this watcher is associated with. This slot is read-only -- it is set when you @code{make} a watcher with a @code{:loop} keyword argument and when you start (call @code{ev-TYPE-start} on) a watcher.
@end defivar

@defivar <ev-watcher> callback
A procedure invoked from @code{@ref{ev-run}} when an event occurs. It is called with two arguments: the watcher it is associated with and @code{revents}, a bitset specifying which events triggered the invocation.

Note that getting and setting this slot will not involve invocations of @code{ev_cb} and @code{ev_set_cb}.
@end defivar
@end deftp

@c ======================================================================
@node Indices
@appendix Indices
@c NODE 索引

@menu
* Function and Syntax Index::   
* Module Index::                
* Class Index::                 
* Variable Index::              
@end menu

@node Function and Syntax Index, Module Index, Indices, Indices
@appendixsec Function and Syntax Index
@c NODE 手続きと構文索引
@printindex fn

@node Module Index, Class Index, Function and Syntax Index, Indices
@appendixsec Module Index
@c NODE モジュール索引
@printindex md

@node Class Index, Variable Index, Module Index, Indices
@appendixsec Class Index
@c NODE クラス索引

For readability, the surrounding @samp{<} and @samp{>} are stripped off.

@printindex cl

@node Variable Index,  , Class Index, Indices
@appendixsec Variable Index
@c NODE 変数索引
@printindex vr


@contents
@bye

@c Local variables:
@c outline-regexp: "@chap\\|@unnu\\|@\\(sub\\)*section"
@c end:
