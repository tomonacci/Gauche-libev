"
#include <stdio.h>
#include <gauche.h>
#include <gauche/class.h>
#include <gauche/extend.h>
#include <ev.h>

ScmClass *EvLoopClass, *EvIoWatcherClass, *EvSignalWatcherClass;

#define EV_LOOP_P(obj) SCM_XTYPEP(obj, EvLoopClass)
#define EV_LOOP_UNBOX(obj) SCM_FOREIGN_POINTER_REF(struct ev_loop*, obj)
#define EV_LOOP_BOX(ptr) Scm_MakeForeignPointer(EvLoopClass, ptr)

#define EV_IO_WATCHER_P(obj) SCM_XTYPEP(obj, EvIoWatcherClass)
#define EV_IO_WATCHER_UNBOX(obj) SCM_FOREIGN_POINTER_REF(struct ev_io*, obj)
#define EV_IO_WATCHER_BOX(ptr) Scm_MakeForeignPointer(EvIoWatcherClass, ptr)

#define EV_SIGNAL_WATCHER_P(obj) SCM_XTYPEP(obj, EvSignalWatcherClass)
#define EV_SIGNAL_WATCHER_UNBOX(obj) SCM_FOREIGN_POINTER_REF(struct ev_signal*, obj)
#define EV_SIGNAL_WATCHER_BOX(ptr) Scm_MakeForeignPointer(EvSignalWatcherClass, ptr)

SCM_CLASS_DECL(Scm_EvTimerWatcherClass);
#define SCM_CLASS_EV_TIMER_WATCHER (&Scm_EvTimerWatcherClass)
#define SCM_EV_TIMER_WATCHER(obj) ((ScmEvTimerWatcher*)(obj))
#define SCM_EV_TIMER_WATCHER_P(obj) (SCM_XTYPEP(obj, SCM_CLASS_EV_TIMER_WATCHER))

typedef struct ScmEvTimerWatcherRec {
  SCM_HEADER;
  struct ev_timer timer;
} ScmEvTimerWatcher;

void Scm_Init_libev_glue(ScmModule*);
"

(define-type <ev-loop> "struct ev_loop*" "ev-loop"
  "EV_LOOP_P" "EV_LOOP_UNBOX" "EV_LOOP_BOX")

(define-type <ev-io-watcher> "struct ev_io*" "ev-io-watcher"
  "EV_IO_WATCHER_P" "EV_IO_WATCHER_UNBOX" "EV_IO_WATCHER_BOX")

(define-type <ev-signal-watcher> "struct ev_signal*" "ev-signal-watcher"
  "EV_SIGNAL_WATCHER_P" "EV_SIGNAL_WATCHER_UNBOX" "EV_SIGNAL_WATCHER_BOX")

(define-cfn timer_repeat_getter (obj) :static
  (return (Scm_VMReturnFlonum (ref (-> (SCM_EV_TIMER_WATCHER obj) timer) repeat))))

(define-cfn timer_repeat_setter (obj value)::void :static
  (unless (SCM_REALP value)
    (Scm_Error "double required, but got %S" value))
  (set! (ref (-> (SCM_EV_TIMER_WATCHER obj) timer) repeat) (Scm_GetDouble value)))

(define-cclass <ev-timer-watcher> "ScmEvTimerWatcher*" "Scm_EvTimerWatcherClass" ()
  ((repeat :getter (c "timer_repeat_getter") :setter (c "timer_repeat_setter"))
   ;(minor-version :type <real>)
   ))

(define-cproc test-libev () ::<const-cstring>
  (result "libev is working"))

(define-cproc ev-run (loop::<ev-loop>)::<void>
  (ev_run loop 0)
  )

(define-cproc ev-loop-new (flags::<uint>)::<ev-loop>
  (let* ((loop::(struct ev_loop*) (ev_loop_new flags)))
    (return loop))
  )

(define-cproc ev-default-loop (flags::<uint>)::<ev-loop>
  (return (ev_default_loop flags)))

(define-cfn io_cb (loop::(struct ev_loop*) w::(struct ev_io*) revents::int)::void :static
  (Scm_ApplyRec3 (-> w data) (EV_LOOP_BOX loop) (EV_IO_WATCHER_BOX w) (SCM_MAKE_INT revents))
  )

(define-cproc ev-is-active (w::<ev-io-watcher>)::<boolean>
  (return (ev_is_active w)))

(define-cproc ev-io-new ()::<ev-io-watcher>
  (return (SCM_NEW (struct ev_io)))
  )

(define-cproc ev-io-init (w::<ev-io-watcher> callback fd::<int> events::<int>)::<void>
  (set! (-> w data) callback)
  (ev_io_init w io_cb fd events)
  )

(define-cproc ev-io-start (loop::<ev-loop> w::<ev-io-watcher>)::<void>
  (ev_io_start loop w)
  )

(define-cproc ev-io-stop (loop::<ev-loop> w::<ev-io-watcher>)::<void>
  (ev_io_stop loop w)
  )

; FIXME copy-n-pasted from io_cb
(define-cfn signal_cb (loop::(struct ev_loop*) w::(struct ev_signal*) revents::int)::void :static
  (Scm_ApplyRec3 (-> w data) (EV_LOOP_BOX loop) (EV_SIGNAL_WATCHER_BOX w) (SCM_MAKE_INT revents))
  )

(define-cproc ev-signal-new ()::<ev-signal-watcher>
  (return (SCM_NEW (struct ev_signal)))
  )

(define-cproc ev-signal-init (w::<ev-signal-watcher> callback signum::<int>)::<void>
  (set! (-> w data) callback)
  (ev_signal_init w signal_cb signum)
  )

(define-cproc ev-signal-start (loop::<ev-loop> w::<ev-signal-watcher>)::<void>
  (ev_signal_start loop w)
  )

(define-cproc ev-signal-stop (loop::<ev-loop> w::<ev-signal-watcher>)::<void>
  (ev_signal_stop loop w)
  )

(define-cfn timer_cb (loop::(struct ev_loop*) w::(struct ev_timer*) revents::int)::void :static
  (Scm_ApplyRec3 (-> w data) (EV_LOOP_BOX loop) (EV_SIGNAL_WATCHER_BOX w) (SCM_MAKE_INT revents))
  )

(define-cproc ev-timer-new ()
  (let* ((w (SCM_OBJ (SCM_NEW ScmEvTimerWatcher))))
    (SCM_SET_CLASS w SCM_CLASS_EV_TIMER_WATCHER)
    (return w)))

(define-cproc ev-timer-init (w::<ev-timer-watcher> callback after::<real> repeat::<real>)::<void>
  (set! (ref (-> w timer) data) callback)
  (ev_timer_init (& (-> w timer)) timer_cb after repeat)
  )

(define-cproc ev-timer-start (loop::<ev-loop> w::<ev-timer-watcher>)::<void>
  (ev_timer_start loop (& (-> w timer)))
  )

(define-cproc ev-timer-stop (loop::<ev-loop> w::<ev-timer-watcher>)::<void>
  (ev_timer_stop loop (& (-> w timer)))
  )

(define-constant EV_READ (c "SCM_MAKE_INT(EV_READ)"))
(define-constant EV_WRITE (c "SCM_MAKE_INT(EV_WRITE)"))

(define-cfn Scm_Init_libev ()::void
  (let* ((mod::ScmModule*))
    (SCM_INIT_EXTENSION libev)
    (set! mod (SCM_MODULE (SCM_FIND_MODULE "control.libev" TRUE)))
    (set! EvLoopClass
      (Scm_MakeForeignPointerClass
       mod "<ev-loop>" NULL NULL
       (logior SCM_FOREIGN_POINTER_KEEP_IDENTITY SCM_FOREIGN_POINTER_MAP_NULL)))
    ; Should take care of this:
    ;   http://lists.schmorp.de/pipermail/libev/2014q4/002462.html
    (set! EvIoWatcherClass
      (Scm_MakeForeignPointerClass
       mod "<ev-io-watcher>" NULL NULL
       (logior SCM_FOREIGN_POINTER_KEEP_IDENTITY SCM_FOREIGN_POINTER_MAP_NULL)))
    (set! EvSignalWatcherClass
      (Scm_MakeForeignPointerClass
       mod "<ev-signal-watcher>" NULL NULL
       (logior SCM_FOREIGN_POINTER_KEEP_IDENTITY SCM_FOREIGN_POINTER_MAP_NULL)))
    (Scm_Init_libev_glue mod)
    ))
