"
#include <stdio.h>
#include <gauche.h>
#include <gauche/class.h>
#include <gauche/extend.h>
#include <gc.h>
#include <ev.h>

ScmClass *EvLoopClass;

#define EV_LOOP_P(obj) SCM_XTYPEP(obj, EvLoopClass)
#define EV_LOOP_UNBOX(obj) SCM_FOREIGN_POINTER_REF(struct ev_loop*, obj)
#define EV_LOOP_BOX(ptr) Scm_MakeForeignPointer(EvLoopClass, ptr)

SCM_CLASS_DECL(Scm_EvWatcherClass);
#define SCM_CLASS_EV_WATCHER (&Scm_EvWatcherClass)
#define SCM_EV_WATCHER(obj) ((ScmEvWatcher*)(obj))
#define SCM_EV_WATCHER_P(obj) (SCM_XTYPEP(obj, SCM_CLASS_EV_WATCHER))

typedef struct ScmEvWatcherRec {
  SCM_HEADER;
  ScmObj callback;
  void *watcher;
} ScmEvWatcher;

SCM_CLASS_DECL(Scm_EvIoClass);
#define SCM_CLASS_EV_IO (&Scm_EvIoClass)
#define SCM_EV_IO(obj) ((ScmEvWatcher*)(obj))
#define SCM_EV_IO_P(obj) (SCM_XTYPEP(obj, SCM_CLASS_EV_IO))

SCM_CLASS_DECL(Scm_EvTimerClass);
#define SCM_CLASS_EV_TIMER (&Scm_EvTimerClass)
#define SCM_EV_TIMER(obj) ((ScmEvWatcher*)(obj))
#define SCM_EV_TIMER_P(obj) (SCM_XTYPEP(obj, SCM_CLASS_EV_TIMER))

void Scm_Init_libev_glue(ScmModule*);
"

(define-cise-expr (extract type obj)
  `(cast (struct ,(string->symbol #`"ev_,|type|*")) (-> (SCM_EV_WATCHER ,obj) watcher)))

(define-type <ev-loop> "struct ev_loop*" "ev-loop"
  "EV_LOOP_P" "EV_LOOP_UNBOX" "EV_LOOP_BOX")

(define-cclass <ev-watcher> "ScmEvWatcher*" "Scm_EvWatcherClass" () ((callback)))

(define-cfn io_cb (loop::(struct ev_loop*) w::(struct ev_io*) revents::int)::void :static
  (unless (SCM_EV_IO_P (SCM_OBJ (-> w data)))
    (Scm_Error "<ev-io> required, but got %S" (SCM_OBJ (-> w data))))
  (unless (== (extract io (SCM_OBJ (-> w data))) w)
    (Scm_Error "corrupted <ev-io> %S" (SCM_OBJ (-> w data))))
  (Scm_ApplyRec3 (-> (SCM_EV_WATCHER (-> w data)) callback) (EV_LOOP_BOX loop) (SCM_OBJ (-> w data)) (Scm_MakeInteger revents)))

(define-cfn io_fd_getter (obj) :static
  (return (Scm_MakeInteger (-> (extract io obj) fd))))

(define-cfn io_events_getter (obj) :static
  (return (Scm_MakeInteger (-> (extract io obj) events))))

(define-cclass <ev-io> "ScmEvWatcher*" "Scm_EvIoClass" (Scm_EvWatcherClass)
  ((fd :getter (c "io_fd_getter") :setter #f)
   (events :getter (c "io_events_getter") :setter #f)
   )
  (allocator
    (let* ((watcher (SCM_OBJ (SCM_NEW ScmEvWatcher))))
      (SCM_SET_CLASS watcher SCM_CLASS_EV_IO)
      (set! (-> (SCM_EV_WATCHER watcher) watcher) (SCM_NEW (struct ev_io)))
      (set! (-> (extract watcher watcher) data) watcher)
      (ev_init (extract io watcher) io_cb)
      (return watcher)))
  )

(define-cproc ev-io-start (loop::<ev-loop> watcher::<ev-io>)::<void>
  (ev_io_start loop (extract io watcher)))

(define-cproc ev-io-stop (loop::<ev-loop> watcher::<ev-io>)::<void>
  (ev_io_stop loop (extract io watcher)))

(define-cfn timer_cb (loop::(struct ev_loop*) w::(struct ev_timer*) revents::int)::void :static
  (unless (SCM_EV_TIMER_P (SCM_OBJ (-> w data)))
    (Scm_Error "<ev-timer> required, but got %S" (SCM_OBJ (-> w data))))
  (unless (== (extract timer (SCM_OBJ (-> w data))) w)
    (Scm_Error "corrupted <ev-timer>: %S" (SCM_OBJ (-> w data))))
  (unless (SCM_CLOSUREP (-> (SCM_EV_WATCHER (-> w data)) callback))
    (Scm_Error "not a closure: %S" (SCM_OBJ (-> w data))))
  (Scm_ApplyRec3 (-> (SCM_EV_WATCHER (-> w data)) callback) (EV_LOOP_BOX loop) (SCM_OBJ (-> w data)) (Scm_MakeInteger revents)))

(define-cfn timer_repeat_getter (obj) :static
  (return (Scm_VMReturnFlonum (-> (extract timer obj) repeat))))

(define-cfn timer_repeat_setter (obj value)::void :static
  (unless (SCM_REALP value)
    (Scm_Error "double required, but got %S" value))
  (set! (-> (extract timer obj) repeat) (Scm_GetDouble value)))

(define-cclass <ev-timer> "ScmEvWatcher*" "Scm_EvTimerClass" (Scm_EvWatcherClass)
  ((repeat :getter (c "timer_repeat_getter") :setter (c "timer_repeat_setter"))
   )
  (allocator
    (let* ((watcher (SCM_OBJ (SCM_NEW ScmEvWatcher))))
      (SCM_SET_CLASS watcher SCM_CLASS_EV_TIMER)
      (set! (-> (SCM_EV_WATCHER watcher) watcher) (SCM_NEW (struct ev_timer)))
      ;(Scm_GCSentinel (-> (SCM_EV_WATCHER watcher) watcher) "my timer")
      ;(set! (-> (SCM_EV_WATCHER watcher) watcher) (malloc (sizeof (struct ev_timer))))
      (set! (-> (extract watcher watcher) data) watcher)
      (ev_init (extract timer watcher) timer_cb)
      (return watcher)))
  )

(define-cproc ev-timer-start (loop::<ev-loop> watcher::<ev-timer>)::<void>
  (ev_timer_start loop (extract timer watcher)))

(define-cproc ev-timer-stop (loop::<ev-loop> watcher::<ev-timer>)::<void>
  (ev_timer_stop loop (extract timer watcher)))

(define-cproc ev-run (loop::<ev-loop>)::<void>
  (ev_run loop 0)
  )

(define-cproc ev-loop-new (flags::<uint>)::<ev-loop>
  (let* ((loop::(struct ev_loop*) (ev_loop_new flags)))
    (return loop))
  )

(define-cproc ev-default-loop (flags::<uint>)::<ev-loop>
  (return (ev_default_loop flags)))

(define-cproc ev-watcher-active? (watcher)::<boolean>
  (unless (Scm_TypeP watcher SCM_CLASS_EV_WATCHER)
    (Scm_Error "<ev-watcher> required, but got %S" watcher))
  (return (ev_is_active (extract watcher watcher))))

(define-cproc ev-watcher-pending? (watcher)::<boolean>
  (unless (Scm_TypeP watcher SCM_CLASS_EV_WATCHER)
    (Scm_Error "<ev-watcher> required, but got %S" watcher))
  (return (ev_is_pending (extract watcher watcher))))

(define-cproc ev-io-init (w::<ev-io> callback fd::<int> events::<int>)::<void>
  (set! (-> (SCM_EV_IO w) callback) callback)
  (ev_io_set (extract io w) fd events)
  )

(define-cproc ev-timer-init (w::<ev-timer> callback after::<real> repeat::<real>)::<void>
  (set! (-> (SCM_EV_TIMER w) callback) callback)
  (ev_timer_set (extract timer w) after repeat)
  )

(define-constant EV_READ (c "SCM_MAKE_INT(EV_READ)"))
(define-constant EV_WRITE (c "SCM_MAKE_INT(EV_WRITE)"))

(define-cfn Scm_Init_libev ()::void
  (let* ((mod::ScmModule*))
    (ev_set_allocator GC_realloc)
    (SCM_INIT_EXTENSION libev)
    (set! mod (SCM_MODULE (SCM_FIND_MODULE "control.libev" TRUE)))
    (set! EvLoopClass
      (Scm_MakeForeignPointerClass
       mod "<ev-loop>" NULL NULL
       (logior SCM_FOREIGN_POINTER_KEEP_IDENTITY SCM_FOREIGN_POINTER_MAP_NULL)))
    (Scm_InitStaticClass (& Scm_EvWatcherClass) "<ev-watcher>" mod NULL 0)
    ; Should take care of this:
    ;   http://lists.schmorp.de/pipermail/libev/2014q4/002462.html
    (Scm_Init_libev_glue mod)
    ))
