"
#include <stdio.h>
#include <gauche.h>
#include <gauche/class.h>
#include <gauche/extend.h>
#include <ev.h>

ScmClass *EvLoopClass;

#define EV_LOOP_P(obj) SCM_XTYPEP(obj, EvLoopClass)
#define EV_LOOP_UNBOX(obj) SCM_FOREIGN_POINTER_REF(struct ev_loop*, obj)
#define EV_LOOP_BOX(ptr) Scm_MakeForeignPointer(EvLoopClass, ptr)

SCM_CLASS_DECL(Scm_EvWatcherClass);
#define SCM_CLASS_EV_WATCHER (&Scm_EvWatcherClass)
#define SCM_EV_WATCHER(obj) ((ScmEvWatcher*)(obj))
#define SCM_EV_WATCHER_P(obj) (SCM_XTYPEP(obj, SCM_CLASS_EV_WATCHER))

typedef struct ScmEvWatcherRec {
  SCM_HEADER;
  ScmObj callback;
  struct ev_watcher watcher;
} ScmEvWatcher;

void Scm_Init_libev_glue(ScmModule*);
"

(eval*
  (use text.unicode)
  (define (slots->decls slots)
    (append-map
     (^(slot)
       (cond-list
         ((cadr slot) => (cut string-append "static ScmObj " <> "(ScmObj);"))
         ((caddr slot) => (cut string-append "static void " <> "(ScmObj, ScmObj);"))))
     slots))
  (define (slots->specs slots)
    (define (wrap cfn) (and cfn `(c ,cfn)))
    (map (^(slot) `(,(car slot) :getter ,(wrap (cadr slot)) :setter ,(wrap (cadr slot)))) slots))
  (define (watcher-class-decl name slots)
    (let ((NAME (string-upcase name))
          (Name (string-titlecase name))
          (<name> (string->symbol #`"<ev-,|name|>"))
          (w (string->symbol #`"w::<ev-,|name|>"))
          )
      `(begin
         ,#`"
SCM_CLASS_DECL(Scm_Ev,|Name|Class);
#define SCM_CLASS_EV_,NAME (&Scm_Ev,|Name|Class)
#define SCM_EV_,NAME(obj) ((ScmEv,|Name|*)(obj))
#define SCM_EV_,|NAME|_P(obj) (SCM_XTYPEP(obj, SCM_CLASS_EV_,NAME))

typedef struct ScmEv,|Name|Rec {
  SCM_HEADER;
  ScmObj callback;
  struct ev_,name ,name;
} ScmEv,|Name|;
"
         ,@(slots->decls slots)
         (define-cclass ,<name> ,#`"ScmEv,|Name|*" ,#`"Scm_Ev,|Name|Class" (Scm_EvWatcherClass)
           ,(slots->specs slots)
           (allocator
             (let* ((w (SCM_OBJ (SCM_NEW ,(string->symbol #`"ScmEv,|Name|")))))
               (SCM_SET_CLASS w ,(string->symbol #`"SCM_CLASS_EV_,NAME"))
               (set! (ref (-> (,(string->symbol #`"SCM_EV_,NAME") w) ,(string->symbol name)) data) w)
               (return w)))
           )
         (define-cfn ,(string->symbol #`",|name|_cb") (loop::(struct ev_loop*) w::(struct ,(string->symbol #`"ev_,|name|*")) revents::int)::void :static
           (Scm_ApplyRec3 (-> (SCM_EV_WATCHER (-> w data)) callback) (EV_LOOP_BOX loop) (SCM_OBJ (-> w data)) (SCM_MAKE_INT revents)))
         (define-cproc ,(string->symbol #`"ev-,|name|-start") (loop::<ev-loop> ,w)::<void>
           (,(string->symbol #`"ev_,|name|_start") loop (& (-> w ,(string->symbol name)))))
         (define-cproc ,(string->symbol #`"ev-,|name|-stop") (loop::<ev-loop> ,w)::<void>
           (,(string->symbol #`"ev_,|name|_stop") loop (& (-> w ,(string->symbol name)))))
         ))))

(define-type <ev-loop> "struct ev_loop*" "ev-loop"
  "EV_LOOP_P" "EV_LOOP_UNBOX" "EV_LOOP_BOX")

(define-cclass <ev-watcher> "ScmEvWatcher*" "Scm_EvWatcherClass" () ((callback)))

(eval*
  ;(for-each (^s (write s) (newline)) (watcher-class-decl "io" ()))
  (watcher-class-decl "io"
    '((fd "io_fd_getter" #f)
      (events "io_events_getter" #f)
      )))

(eval*
  (watcher-class-decl "signal"
    '((signum "signal_signum_getter" #f)
      )))

(eval*
  (watcher-class-decl "timer"
    '((repeat "timer_repeat_getter" "timer_repeat_setter"))))

(eval*
  (watcher-class-decl "stat"
    '(
      (interval "stat_interval_getter" #f)
      (path "stat_path_getter" #f)
      )))

(define-cfn io_fd_getter (obj) :static
  (return (Scm_MakeInteger (ref (-> (SCM_EV_IO obj) io) fd))))

(define-cfn io_events_getter (obj) :static
  (return (Scm_MakeInteger (ref (-> (SCM_EV_IO obj) io) events))))

(define-cfn signal_signum_getter (obj) :static
  (return (Scm_MakeInteger (ref (-> (SCM_EV_SIGNAL obj) signal) signum))))

(define-cfn stat_interval_getter (obj) :static
  (return (Scm_VMReturnFlonum (ref (-> (SCM_EV_STAT obj) stat) interval))))

(define-cfn stat_path_getter (obj) :static
  (return (SCM_MAKE_STR_COPYING (ref (-> (SCM_EV_STAT obj) stat) path))))

(define-cfn timer_repeat_getter (obj) :static
  (return (Scm_VMReturnFlonum (ref (-> (SCM_EV_TIMER obj) timer) repeat))))

(define-cfn timer_repeat_setter (obj value)::void :static
  (unless (SCM_REALP value)
    (Scm_Error "double required, but got %S" value))
  (set! (ref (-> (SCM_EV_TIMER obj) timer) repeat) (Scm_GetDouble value)))

(define-cproc ev-run (loop::<ev-loop>)::<void>
  (ev_run loop 0)
  )

(define-cproc ev-loop-new (flags::<uint>)::<ev-loop>
  (let* ((loop::(struct ev_loop*) (ev_loop_new flags)))
    (return loop))
  )

(define-cproc ev-default-loop (flags::<uint>)::<ev-loop>
  (return (ev_default_loop flags)))

(define-cproc ev-watcher-active? (watcher)::<boolean>
  (unless (Scm_TypeP watcher SCM_CLASS_EV_WATCHER)
    (Scm_Error "<ev-watcher> required, but got %S" watcher))
  (return (ev_is_active (& (-> (SCM_EV_WATCHER watcher) watcher)))))

(define-cproc ev-watcher-pending? (watcher)::<boolean>
  (unless (Scm_TypeP watcher SCM_CLASS_EV_WATCHER)
    (Scm_Error "<ev-watcher> required, but got %S" watcher))
  (return (ev_is_pending (& (-> (SCM_EV_WATCHER watcher) watcher)))))

(define-cproc ev-io-init (w::<ev-io> callback fd::<int> events::<int>)::<void>
  (set! (-> (SCM_EV_IO w) callback) callback)
  (ev_io_init (& (-> (SCM_EV_IO w) io)) io_cb fd events)
  )

(define-cproc ev-signal-init (w::<ev-signal> callback signum::<int>)::<void>
  (set! (-> (SCM_EV_SIGNAL w) callback) callback)
  (ev_signal_init (& (-> (SCM_EV_SIGNAL w) signal)) signal_cb signum)
  )

(define-cproc ev-timer-init (w::<ev-timer> callback after::<real> repeat::<real>)::<void>
  (set! (-> (SCM_EV_TIMER w) callback) callback)
  (ev_timer_init (& (-> (SCM_EV_TIMER w) timer)) timer_cb after repeat)
  )

(define-constant EV_READ (c "SCM_MAKE_INT(EV_READ)"))
(define-constant EV_WRITE (c "SCM_MAKE_INT(EV_WRITE)"))

(define-cfn Scm_Init_libev ()::void
  (let* ((mod::ScmModule*))
    (SCM_INIT_EXTENSION libev)
    (set! mod (SCM_MODULE (SCM_FIND_MODULE "control.libev" TRUE)))
    (set! EvLoopClass
      (Scm_MakeForeignPointerClass
       mod "<ev-loop>" NULL NULL
       (logior SCM_FOREIGN_POINTER_KEEP_IDENTITY SCM_FOREIGN_POINTER_MAP_NULL)))
    (Scm_InitStaticClass (& Scm_EvWatcherClass) "<ev-watcher>" mod NULL 0)
    ; Should take care of this:
    ;   http://lists.schmorp.de/pipermail/libev/2014q4/002462.html
    (Scm_Init_libev_glue mod)
    ))
