(use control.libev)
(use gauche.collection)
(use gauche.fcntl)
(use gauche.net)
(use gauche.parameter)
(use gauche.partcont)
(use gauche.uvector)
(use picohttpparser)
(use rfc.uri)
(use srfi-1)
(use srfi-19)
(use sxml.serializer)
(use text.html-lite :only (html-escape-string))
(use util.queue)
(use util.relation)
(use www.cgi)

(define *loop* #f)

(define (set-nonblocking! port-or-fd)
  (sys-fcntl port-or-fd F_SETFL (logior (sys-fcntl port-or-fd F_GETFL) O_NONBLOCK)))

(define (setup-response status body)
  (let* ((gmt (sys-gmtime (sys-time)))
         (date (sys-strftime "%a, %d %b %Y %H:%M:%S" gmt))
         (status-message (if (= status 200) "OK" "Not found"))
         )
    (string->u8vector
     #`"HTTP/1.1 ,status ,|status-message|\r\n\
        Connection: close\r\n\
        Date: ,date GMT\r\n\
        Server: httpd.gosh\r\n\
        Content-Type: text/html\r\n\
        Content-Length: ,(string-size body)\r\n\r\n,body")
    )
  )

(define (request->response request)
  (case (string->symbol (~ request'method))
    ((GET)
     (receive (_ path query _) (uri-decompose-hierarchical (~ request'path))
       (let1 params (parameterize ((cgi-metavariables `(("REQUEST_METHOD" "GET")
                                                        ("QUERY_STRING" ,query))))
                      (cgi-parse-parameters))
         (cond ((string=? path "/")
                (values 200 () "<h1>It works!</h1>"))
               ((string=? path "/echo")
                (values 200 () (format "<pre>~a</pre>" (html-escape-string (u8vector->string (~ request'buf))))))
               (else (values 404 () "Not found :|"))))))
    (else (values 404 () "Not found :|"))))

(define (send-response client response)
  (let1 n (socket-send client response)
    (and (not (= n (u8vector-length response))) (uvector-alias <u8vector> response n))))

(define (recv-request client buf last-len)
  (let* ((n (socket-recv! client (uvector-alias <u8vector> buf last-len)))
         (len (+ last-len n)))
    (when (zero? n)
      (error "connection closed by peer"))
    (or (phr-parse-request buf len last-len) len)))

(define (log-interaction request status body)
  (format #t "~a ~d ~d\n" (date->string (time-utc->date (current-time)) "~5.~N~z") status (string-size body))
  )

(define (setup-server port)
  (define server (make-server-socket 'inet port :backlog 128 :reuse-addr? #t))
  (define ss-watcher (make <ev-io> :loop *loop*))

  (define (init-send loop client request watcher)
    (receive (status _ body) (request->response request)
      (let1 response (send-response client (setup-response status body))
        (if response
          (begin
            (unless watcher
              (set! watcher (make <ev-io> :loop loop)))
            (ev-io-init watcher
             (^(watcher _)
               (unless (send-response client response)
                 (ev-io-stop watcher)
                 (socket-close client)
                 (log-interaction request status body)
                 ))
             (socket-fd client) EV_WRITE)
            (ev-io-start watcher)
            )
          (begin
            (socket-close client)
            (log-interaction request status body)))
        )))

  (define (init-recv loop client)
    (let1 buf (make-u8vector 4096)
      (set-nonblocking! (socket-fd client))
      (let1 request (guard (e (else #?=e 0)) (recv-request client buf 0))
        (if (is-a? request <phr-request>)
          (init-send loop client request #f)
          (let1 watcher (make <ev-io> :loop loop)
            (ev-io-init watcher
             (let1 last-len request
               (^(watcher _)
                 (guard (e (else (ev-io-stop watcher) (socket-close client)))
                   (let1 request (recv-request client buf last-len)
                     (if (is-a? request <phr-request>)
                       (begin
                         (ev-io-stop watcher)
                         (init-send loop client request watcher))
                       (set! last-len request))
                     ))))
             (socket-fd client) EV_READ)
            (ev-io-start watcher)
            )))))

  (define (accept-handler watcher revents)
    (guard (e (else #?=e))
      (let1 client (socket-accept server)
        (if client
          (init-recv (~ watcher'loop) client)
          (print "accept(2) would block")))))

  (set-nonblocking! (socket-fd server))
  (ev-io-init
   ss-watcher
   accept-handler
   (socket-fd server)
   EV_READ)
  (ev-io-start ss-watcher)
  )

(define (setup-watchdog hz)
  (let ((timer (make <ev-timer>))
        (interval (/. 1.0 hz)))
    (ev-timer-init timer
     (^(loop watcher revents)
       (unless (is-a? loop <ev-loop>) (error "not a loop:" loop))
       (unless (is-a? watcher <ev-timer>) (error "not a watcher:" watcher))
       )
     interval interval)
    (ev-timer-start *loop* timer)))

(define (main args)
  (set! *loop* (ev-default-loop 0))
  (set-signal-handler! SIGINT (^ _ (flush) (exit)))
  (setup-watchdog 5)
  (setup-server (cadr args))
  (ev-run *loop*)
  0)
